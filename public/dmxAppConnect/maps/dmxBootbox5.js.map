{"version":3,"sources":["actions/bootbox.js","components/bootbox.js"],"names":["dmx","getModboxOptions","type","options","newOptions","backdrop","message","body","title","animate","fade","closeButton","showHeaderClose","swapButtonOrder","centerVertical","center","scrollable","buttons","ok","label","className","style","replace","confirm","okButton","cancel","inputType","input","multiple","required","inputOptions","map","option","value","text","join","index","rows","placeholder","autocomplete","minlength","maxlength","min","max","step","pattern","trim","Actions","modbox","alert","this","parse","info","success","warning","danger","condition","then","Object","assign","else","_exec","catch","_options","extend","destroyOnClose","defaultButton","Promise","resolve","box","inputEl","modalEl","querySelector","checked","close","callback","reportValidity","nodeName","Array","from","selectedOptions","checkedEl","querySelectorAll","el","hide","okBtn","addButton","addEventListener","event","key","click","addEvent","show","Component","methods"],"mappings":"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","file":"../dmxBootbox5/dmxBootbox5.js","sourcesContent":["dmx.getModboxOptions = (type, options) => {\r\n  const newOptions = {\r\n    backdrop: 'static'\r\n  };\r\n\r\n  if (options.message) {\r\n    newOptions.body = options.message;\r\n  }\r\n\r\n  if (options.title) {\r\n    newOptions.title = options.title;\r\n  }\r\n\r\n  if (options.backdrop != null) {\r\n    if (options.backdrop === true || options.backdrop === 'true') {\r\n      newOptions.backdrop = true;\r\n    } else if (options.backdrop === false || options.backdrop === 'false') {\r\n      newOptions.backdrop = false;\r\n    }\r\n  }\r\n\r\n  if (options.animate === false) {\r\n    newOptions.fade = false;\r\n  }\r\n\r\n  if (options.closeButton === false) {\r\n    newOptions.showHeaderClose = false;\r\n  }\r\n\r\n  if (options.swapButtonOrder) {\r\n    newOptions.swapButtonOrder = true;\r\n  }\r\n\r\n  if (options.centerVertical) {\r\n    newOptions.center = true;\r\n  }\r\n\r\n  if (options.scrollable !== true) {\r\n    newOptions.scrollable = false;\r\n  }\r\n\r\n  if (type == 'alert') {\r\n    if (options.buttons && options.buttons.ok) {\r\n      newOptions.closeButton = {};\r\n\r\n      if (options.buttons.ok.label) {\r\n        newOptions.closeButton.label = options.buttons.ok.label\r\n      }\r\n\r\n      if (options.buttons.ok.className) {\r\n        newOptions.closeButton.style = options.buttons.ok.className.replace('btn-', '');\r\n      }\r\n    }\r\n  } else if (type == 'confirm') {\r\n    if (options.buttons && options.buttons.confirm) {\r\n      newOptions.okButton = {};\r\n\r\n      if (options.buttons.confirm.label) {\r\n        newOptions.okButton.label = options.buttons.confirm.label;\r\n      }\r\n\r\n      if (options.buttons.confirm.className) {\r\n        newOptions.okButton.style = options.buttons.confirm.className.replace('btn-', '');\r\n      }\r\n    }\r\n\r\n    if (options.buttons && options.buttons.cancel) {\r\n      newOptions.closeButton = {};\r\n\r\n      if (options.buttons.cancel.label) {\r\n        newOptions.closeButton.label = options.buttons.cancel.label;\r\n      }\r\n\r\n      if (options.buttons.cancel.className) {\r\n        newOptions.closeButton.style = options.buttons.cancel.className.replace('btn-', '');\r\n      }\r\n    }\r\n  } else if (type == 'prompt') {\r\n    if (options.buttons && options.buttons.confirm) {\r\n      newOptions.okButton = {};\r\n\r\n      if (options.buttons.confirm.label) {\r\n        newOptions.okButton.label = options.buttons.confirm.label;\r\n      }\r\n\r\n      if (options.buttons.confirm.className) {\r\n        newOptions.okButton.style = options.buttons.confirm.className.replace('btn-', '');\r\n      }\r\n    }\r\n\r\n    if (options.buttons && options.buttons.cancel) {\r\n      newOptions.closeButton = {};\r\n\r\n      if (options.buttons.cancel.label) {\r\n        newOptions.closeButton.label = options.buttons.cancel.label;\r\n      }\r\n\r\n      if (options.buttons.cancel.className) {\r\n        newOptions.closeButton.style = options.buttons.cancel.className.replace('btn-', '');\r\n      }\r\n    }\r\n\r\n    if (options.inputType == 'select') {\r\n      newOptions.input =\r\n        `<select\r\n          class=\"form-select\"\r\n          ${options.multiple ? 'multiple' : ''}\r\n          ${options.required ? 'required' : ''}\r\n        >\r\n          ${options.inputOptions.map((option) => `\r\n            <option\r\n              value=\"${option.value || ''}\"\r\n              ${options.value == option.value ? 'selected' : ''}\r\n            >${option.text || option.value}</option>\r\n          `).join('')}\r\n        </select>`;\r\n    } else if (options.inputType == 'checkbox' || options.inputType == 'radio') {\r\n      newOptions.input =\r\n        options.inputOptions.map((option, index) =>\r\n          `<div class=\"form-check\">\r\n            <input\r\n              id=\"modbox-input-${index}\"\r\n              type=\"${options.inputType}\"\r\n              name=\"modbox-input-name\"\r\n              value=\"${option.value || ''}\"\r\n              ${options.value == option.value ? 'checked' : ''}\r\n            >\r\n            <label class=\"form-check-label\" for=\"modbox-input-${index}\">\r\n              ${option.text || option.value}\r\n            </label>\r\n          </div>`\r\n        ).join('');\r\n    } else if (options.inputType == 'textarea') {\r\n      newOptions.input =\r\n        `<textarea\r\n          class=\"form-control\"\r\n          ${options.rows ? `rows=\"${options.rows}\"` : ''}\r\n          ${options.placeholder ? `placeholder=\"${options.placeholder}\"` : ''}\r\n          ${options.autocomplete ? `autocomplete=\"${options.autocomplete}\"` : ''}\r\n          ${options.minlength ? `minlength=\"${options.minlength}\"` : ''}\r\n          ${options.maxlength ? `maxlength=\"${options.maxlength}\"` : ''}\r\n          ${options.required ? 'required' : ''}\r\n        >${options.value || ''}</textarea>`;\r\n    } else {\r\n      newOptions.input =\r\n        `<input\r\n          type=\"${options.inputType}\"\r\n          class=\"${options.inputType == 'range' ? 'form-range' : 'form-control'}\"\r\n          value=\"${options.value || ''}\"\r\n          ${options.placeholder ? `placeholder=\"${options.placeholder}\"` : ''}\r\n          ${options.autocomplete ? `autocomplete=\"${options.autocomplete}\"` : ''}\r\n          ${options.minlength ? `minlength=\"${options.minlength}\"` : ''}\r\n          ${options.maxlength ? `maxlength=\"${options.maxlength}\"` : ''}\r\n          ${options.min ? `min=\"${options.min}\"` : ''}\r\n          ${options.max ? `max=\"${options.max}\"` : ''}\r\n          ${options.step ? `step=\"${options.step}\"` : ''}\r\n          ${options.pattern ? `pattern=\"${options.pattern}\"` : ''}\r\n          ${options.required ? 'required' : ''}\r\n        >`;\r\n    }\r\n\r\n    newOptions.body = `\r\n      ${options.message ? `<p>${options.message}</p>` : ''}\r\n      ${newOptions.input}\r\n    `.trim();\r\n  }\r\n\r\n  return newOptions;\r\n}\r\n\r\ndmx.Actions({\r\n\r\n  'bootbox.alert': function(options) {\r\n    return modbox.alert(dmx.getModboxOptions('alert', this.parse(options)));\r\n  },\r\n\r\n  'bootbox.info': function(options) {\r\n    return modbox.info(dmx.getModboxOptions('alert', this.parse(options)));\r\n  },\r\n\r\n  'bootbox.success': function(options) {\r\n    return modbox.success(dmx.getModboxOptions('alert', this.parse(options)));\r\n  },\r\n\r\n  'bootbox.warning': function(options) {\r\n    return modbox.warning(dmx.getModboxOptions('alert', this.parse(options)));\r\n  },\r\n\r\n  'bootbox.danger': function(options) {\r\n    return modbox.danger(dmx.getModboxOptions('alert', this.parse(options)));\r\n  },\r\n\r\n  'bootbox.confirm': function(options) {\r\n    options = Object.assign({}, options);\r\n\r\n    const condition = {\r\n        'then': options.then,\r\n        'else': options.else\r\n    };\r\n\r\n    delete options.then;\r\n    delete options.else;\r\n    \r\n    return modbox.confirm(dmx.getModboxOptions('confirm', this.parse(options))).then(() => {\r\n      if (condition.then) {\r\n        return this._exec(condition.then).then(() => true);\r\n      }\r\n      return true;\r\n    }).catch(() => {\r\n      if (condition.else) {\r\n        return this._exec(condition.else).then(() => false);\r\n      }\r\n      return false;\r\n    });\r\n  },\r\n\r\n  'bootbox.prompt': function(_options) {\r\n    const options = dmx.extend(true, {\r\n      okButton: {\r\n        label: 'OK',\r\n        style: 'primary'\r\n      },\r\n      closeButton: {\r\n        label: 'Close',\r\n        style: 'secondary'\r\n      }\r\n    }, dmx.getModboxOptions('prompt', this.parse(_options)), {\r\n      destroyOnClose: true,\r\n      defaultButton: false,\r\n      buttons: []\r\n    });\r\n\r\n    return new Promise(resolve => {\r\n      const box = new modbox(options);\r\n      const inputEl = box.modalEl.querySelector('input,select,textarea');\r\n\r\n      if (inputEl.type == 'radio') {\r\n        inputEl.checked = true;\r\n      }\r\n\r\n      options.okButton.close = false;\r\n      options.okButton.callback = () => {\r\n        const isValid = inputEl ? inputEl.reportValidity() : true;\r\n\r\n        if (isValid) {\r\n          if (inputEl.nodeName == 'SELECT' && inputEl.multiple) {\r\n            resolve(Array.from(inputEl.selectedOptions).map(option => option.value));\r\n          } else if (inputEl.type == 'checkbox') {\r\n            const checkedEl = box.modalEl.querySelectorAll('input:checked');\r\n            resolve(Array.from(checkedEl).map(el => el.value));\r\n          } else if (inputEl.type == 'radio') {\r\n            const checkedEl = box.modalEl.querySelector('input:checked');\r\n            resolve(checkedEl.value);\r\n          } else {\r\n            resolve(inputEl.value);\r\n          }\r\n\r\n          box.hide();\r\n        }\r\n      };\r\n\r\n      const okBtn = box.addButton(options.okButton);\r\n      const closeBtn = box.addButton(options.closeButton);\r\n\r\n      if (inputEl && inputEl.nodeName == 'INPUT') {\r\n        inputEl.addEventListener('keyup', (event) => {\r\n          if (event.key === 'Enter') {\r\n            okBtn.click();\r\n          }\r\n        })\r\n      }\r\n\r\n      box.addEvent('hide', () => {\r\n        resolve(null);\r\n      });\r\n\r\n      box.show();\r\n    });\r\n  }\r\n\r\n});\r\n","dmx.Component('bootbox', {\r\n\r\n  methods: {\r\n    alert: function(options) {\r\n      return modbox.alert(dmx.getModboxOptions('alert', options));\r\n    },\r\n\r\n    info: function(options) {\r\n      return modbox.info(dmx.getModboxOptions('alert', options));\r\n    },\r\n  \r\n    success: function(options) {\r\n      return modbox.success(dmx.getModboxOptions('alert', options));\r\n    },\r\n  \r\n    warning: function(options) {\r\n      return modbox.warning(dmx.getModboxOptions('alert', options));\r\n    },\r\n  \r\n    danger: function(options) {\r\n      return modbox.danger(dmx.getModboxOptions('alert', options));\r\n    },\r\n  }\r\n\r\n});"]}